how to find the 4 number of min max and this middle two numbers

#include <stdio.h>

int main()
{
    int a = 5, b = 9, c = 3, d = 7;
    int max4=(a>b&&a>c&&a>d)?a:(b>c&&b>d)?b:(c>d)?c:d;
    int min4=(a<b&&a<c&&a<d)?a:(b<c&&b<d)?b:(c<d)?c:d;
    int m1=(a!=max4&&a!=min4)?a:(b!=max4&&b!=min4)?b:(c!=max4&&c!=min4)?c:d;
    int m2=(a!=max4&&a!=min4&&a!=m1)?a:(b!=max4&&b!=min4&&b!=m1)?b:(c!=max4&&c!=min4&&c!=m1)?c:d;
    int mid1=(m1<m2)?m1:m2;
    int mid2=(m1>m2)?m1:m2;
    printf("Min: %d\n", min4);
    printf("Mid1: %d\n", mid1);
    printf("Mid2: %d\n", mid2);
    printf("Max: %d\n", max4);
}

another method:
#include <stdio.h>

int main()
{
    int a = 40, b = 10, c = 20, d = 30;
    int max4=(a>b&&a>c&&a>d)?a:(b>c&&b>d)?b:(c>d)?c:d;
    int min4=(a<b&&a<c&&a<d)?a:(b<c&&b<d)?b:(c<d)?c:d;
    int min3=(a<b&&a<c)?a:(b<c)?b:c;
    int max3=(a>b&&a>c)?a:(b>c)?b:c;
    int x=max3-min3;
    int y=(a+b+c+d)-max4-min4-x;
    int mid1=(x<y)?x:y;
    int mid2=(x>y)?x:y;
    
    printf("min:%d\n",min4);
    printf("mid1:%d\n",mid1);
    printf("mid2:%d\n",mid2);
    printf("max:%d\n",max4);
}


check if given number is positive ,negative or zero:

#include <stdio.h>

int main()
{
    int a;
    scanf("%d",&a);
    int check=(a>0)?printf("positive"):
    (a<0)?printf("negative"):
    (a=0)?printf("zero"):printf("not_proper");
}


check if a charater is an alphabet or not:
#include <stdio.h>

int main()
{
    char a;
    scanf("%c",&a);
    return (a>=65&&a<=90 ||a>=97&&a<=122)?printf("alphabet"):printf("not alphabet");
    
}

swap two numbers using temp and without temp:

#include <stdio.h>

int main()
{
    /*int a,b,temp;
    scanf("%d %d",&a,&b);
    temp=a;
    a=b;
    b=temp;
    printf("%d %d",a,b);*/
    
    int a,b,temp;
    scanf("%d %d",&a,&b);
    a=a+b;
    b=a-b;
    a=a-b;
    printf("%d %d",a,b);
}


find even or odd number:

#include <stdio.h>

int main()
{
    int a;
    scanf("%d",&a);
    int num=(a%2==0)?printf("even"):printf("odd");
}


Conditional Statements

1. Odd or Even
   *Check whether the number is odd or even.*
   Sample Input: 10
   Sample Output: Even

2. Find maximum of 2, 3, 4 numbers
   *Use if-else ladder or nested if to find the maximum.*
   Sample Input: 7 15 3 9
   Sample Output: Maximum: 15

3. Alphabet, Number, or Special Character
   *Identify the type of the character.*
   Sample Input: @
   Sample Output: Special Character

4. Check Leap Year or Not
   *Check if a given year is a leap year.*
   Sample Input: 2024
   Sample Output: Leap Year

5. Print Day based on input (1-7)
   *Map numbers 1-7 to days of the week.*
   Sample Input: 3
   Sample Output: Wednesday

6. Check if 3 sides form a Triangle
   *Check triangle condition: a + b > c, etc.*
   Sample Input: 3 4 5
   Sample Output: Triangle is possible

7. Validate Date
   *Check if the entered date is valid (dd/mm/yyyy).*
   Sample Input: 29/02/2020
   Sample Output: Valid Date
   range between 1999 t0 3000

8. Validate Time
   *Check if time is valid in HH\:MM format.*
   Sample Input: 13:45
   Sample Output: Valid Time

9. Switch Case Calculator
   *Build a calculator using switch case.*
   Sample Input: 5 + 2
   Sample Output: 7

10. Tic Tac Toe using Switch Case (Advanced)
    *Simulate basic game logic with switch cases.*



#include <stdio.h>
int main(){
  int n;
  scanf("%d",&n);
  for(int i=1;i<=n;i++){
    for(int j=1;j<=i;j++){
      
      printf("*");
    }
    printf("\n");
  }
  return 0;
}


validate date:
#include <stdio.h>

int main() {
    int d, m, y;
    scanf("%d %d %d", &d, &m, &y);  // Take input

    int isLeap = (y % 4 == 0 && y % 100 != 0) || (y % 400 == 0);
    int isValid = 0;

    if (y >= 1900 && y <= 2999) {
        if (m >= 1 && m <= 12) {
            if ((m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d >= 1 && d <= 31)
                isValid = 1;
            else if ((m == 4 || m == 6 || m == 9 || m == 11) && d >= 1 && d <= 30)
                isValid = 1;
            else if (m == 2) {
                if ((isLeap && d >= 1 && d <= 29) || (!isLeap && d >= 1 && d <= 28))
                    isValid = 1;
            }
        }
    }

    if (isValid)
        printf("valid");
    else
        printf("Invalid");

    return 0;
}

sum of factorial  numbers:
#include <stdio.h>

int main() {
    int n, i, j, fact, sum = 0;
    scanf("%d", &n);

    for(i = 1; i <= n; i++) {
        fact=1;
        for(j = 1; j <= i; j++) {
            fact *= j;  // factorial of i
        }
        sum += fact;  // add factorial to sum
    }

    printf("%d\n", sum);
    return 0;
}

🔁 Flow of Execution:
Let's dry run with n = 3:

✅ 1st Iteration (i = 1)
fact = 1

j = 1 → fact *= 1 = 1

sum += 1 → sum = 1

✅ 2nd Iteration (i = 2)
fact = 1 ← 🔁 reset again!

j = 1 → fact = 1

j = 2 → fact = 1 × 2 = 2

sum += 2 → sum = 1 + 2 = 3

✅ 3rd Iteration (i = 3)
fact = 1 ← 🔁 reset again!

j = 1 → fact = 1

j = 2 → fact = 1 × 2 = 2

j = 3 → fact = 2 × 3 = 6

sum += 6 → sum = 3 + 6 = 9

if i not use fact inside the loop(it flow is):
🔁 Loop Execution (for n = 3):
➤ First Iteration (i = 1)
fact = 1

j = 1 → fact *= 1 → fact = 1

sum = 0 + 1 = 1

➤ Second Iteration (i = 2)
fact already = 1 from before

j = 1 → fact *= 1 → 1

j = 2 → fact *= 2 → 1 × 2 = 2

Now fact = 2

sum = 1 + 2 = 3

But here's the trap...

➤ Third Iteration (i = 3)
fact = 2 (leftover from previous loop!)

j = 1 → fact *= 1 → 2

j = 2 → fact *= 2 → 4

j = 3 → fact *= 3 → 12

Now fact = 12

sum = 3 + 12 = 15

But 3! = 6, not 12 ❌
So the program adds wrong values to sum.





check even or odd without arithmetic operator:
int main() {   
    int num;
    scanf("%d",&num);
    if(num&1) printf("Odd");
    else printf("Even");
    return 0;
}

Even numbers always end in 0 (e.g., 4 is 0100)

Odd numbers always end in 1 (e.g., 5 is 0101)




#include <stdio.h>

int main()
{
	int n=5;
	
	for(int row=1; row<=n; row++,printf("\n")) {
		
			for(int col=0; col<row; col++) {
				printf("%d",((row+col)%2));
			}
		
	}

	return 0;
}
output:

1	
01
101
0101
10101



#include <stdio.h>

int main()
{
	int n=5,a=1;
	
	for(int row=1; row<=n; row++,printf("\n")) {
		
			for(int col=1; col<=row; col++) {
				printf("%d",a);
				a++;
			
			}
		
	}

	return 0;
}
output:

1
23
456
78910
1112131415




#include <stdio.h>

int main()
{
	int n=5;
	
	for(int row=n; row>=1; row--,printf("\n")) {
	    for(int col=1;col<=row;col++)
		   printf("%d",row);
		
	}

	return 0;
}
output:
[?2004l
55555
4444
333
22
1
[?2004h



palindrome 
sum of factorial
Armstrong
adam  number
kaprekan number ex:45 45^2=

check whether power of 2 or not:

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {

    
    int num;
    scanf("%d",&num);
    int found=0;
    for(int i=0;i<=num;i++){
        if(num==(int)pow(2,i)){
            printf("YES");
            found=1;
            break;
        }
        
    }
    if(!found){
        printf("NO");
    }
    return 0;
}
output:
YES



multiply without using *operation:


#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int multiply(int a,int b){
    int result=0;
    int positive=1;
    if(a<0){
        positive=-positive;
        a=-a;
    }
    if(b<0){
        positive=-positive;
        b=-b;
    }
    for(int i=0;i<b;i++){
        result+=a;
    }
    return result*positive;
}

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
    int num1,num2;
    scanf("%d %d",&num1,&num2);
    int product=multiply(num1,num2);
    printf("%d",product);
    return 0;
}


print all the alphabet for n times:


#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {

    int num;
    scanf("%d",&num);
    for(int i=0;i<num;i++){
        for(char j='a';j<='z';j++){
            printf("%c ",j);
        }
        printf("\n");
    }
    return 0;
}
o/p:

a b c d e f g h i j k l m n o p q r s t u v w x y z
a b c d e f g h i j k l m n o p q r s t u v w x y z



find min,max,sum and avg without using array. if -1 it terminated:

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int num;
    int sum=0;
    int count=0;
    int min,max;
    
    scanf("%d",&num);
    
    if(num==-1){
        return 0;
    }
    
    min=max=num;
    sum=num;
    count=1;
    while(1){
        scanf("%d",&num);
        if(num==-1){
            break;
        }
        if(num<min){
            min=num;
        }
        if(num>max){
            max=num;
        }
        sum=sum+num;
        count++;
    }
    float avg=sum/count;
    
    printf("Min = %d\n",min);
    printf("Max = %d\n",max);
    printf("Sum = %d\n",sum);
    printf("Average = %f\n",avg);

    return 0;
}

Input (stdin)

10 20 30 40 50 -1
Your Output (stdout)

Min = 10
Max = 50
Sum = 150
Average = 30.000000

Expected Output

Min = 10
Max = 50
Sum = 150
Average = 30.000000

Write a program to convert the decimal number to the binary form

Input Format

Accept the number as an input

Constraints

nil

Output Format

Display in binary form 0's and 1's

Sample Input 0

24
Sample Output 0

11000
Sample Input 1

21
Sample Output 1

10101


it program:

#include <stdio.h>

int main() {
    int n;
    scanf("%d", &n);

    if (n == 0) {
        printf("0\n");
        return 0;
    }

    int binary[32];
    int i = 0;

    while (n > 0) {
        binary[i] = n % 2;
        n /= 2;
        i++;
    }

    for (int j = i - 1; j >= 0; j--) {
        printf("%d", binary[j]);
    }

    printf("\n");
    return 0;
}



Find all the prime factors of the given number.

Input Format

Integer

Constraints

nil

Output Format

Integer -> Integer

Sample Input 0

10
Sample Output 0

2->1
5->1
Sample Input 1

630
Sample Output 1

2->1
3->2
5->1
7->1


method 1:

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int isprime(int a)
{
    if(a<=1) return 0;
    if(a==2) return 1;
    for(int i=2;i*i<=a;i++){
        if(a%i==0){
            return 0;
        }
    }
    return 1;
}
int main() {

    int n;
    scanf("%d",&n);
    for(int i=2;i<=n;i++){
      if(isprime(i)){
          int count=0;
          while(n%i==0){
              count++;
              n=n/i;
          }
          if(count>0){
              printf("%d->%d\n",i,count);
          }
      }
    }
    
    return 0;
}


method 2:



#include <stdio.h>

int main() {
	int n;
	scanf("%d", &n);

	for (int i = 2; i <= n; i++) {
		int count=0;
		while (n % i == 0) {
			count++;
			n = n / i;
		}
		if(count>0) {
			printf("%d->%d\n",i,count);
		}
	}

	return 0;
}


Find the sum of factors of the given number:

Sample Input 0

10
Sample Output 0

18


#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {

    int n;
    scanf("%d",&n);
    
    int sum=0;
    for(int i=1;i<=n;i++){
        if(n%i==0){
            sum+=i;
        }
        
    }
    printf("%d",sum);
    return 0;
}






																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																							