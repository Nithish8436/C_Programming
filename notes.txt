1 bytes=8bits (2^8=256)


number conversion of binary , decimal,hexadecimal, octa

printf() -function call statement 

scanf("%d",&a);  -collect from user 

scanf("%d",a); -access the address

excape:

\n-newline
\t=tabspace,
\b-backspace


data:

based on sign (+/-):

signed int a -255 to -255
unsigned


based on size
 
sizeof()

example:
 int main()
{
int a;
printf("5ld",sizeof(a));
}


example 2:
int main()
{
int a;
int size=sizeof(a);
printf("ld",size);
}



if 0 to 255 if your value if 256 it produce 0 and if your valye is -1 it produce 255

short,long 


char:

char 1bytes 
a-97 z-90 

specifier: %c


example:
int main()
{
int a,b;
scanf("%d%d ",&a&b);
printf("%d%d",a,b);
}

in this program "%d%d " is not proper coding because if you are spacing the user input cursor blinking continously.


dont use %s for &ch in scanf("%s ",&ch); because it is the string 

in the string it take space as the termination. sowe my scanf("%[^\n]s",ch); like wise we set scanf("%[^A]s",ch); ,scanf("%[^.]s",ch); when the A,nextline ,.comes it stop colleting the input.

%.*f → lets you dynamically control the number of decimal places.

The * means: "Take the precision from the next argument before the value to be printed."


float:

float have 4 bytes (precision 6)
%f

example:
int main()
{
float f=3.14;
printf("%f",a);
}

it output is 3.140000

another xample:

int main()
{
float f=3.14;
printf("%.2f",a);
}

it output is 3.14


another example:

int main()
{
float f=3.1434578;
printf("%.2f",f);
}

it output is 3.143458


double: 8 bytes
(precision 15 to 17)

it store 15 to 17 but it print 6 decimal values only.

example:

int main()
{
double f=3.1434578;
printf("%lf",f);
}

it output is 3.143458

if you use .f only you only get 3 for 3.14

in the 15 to 17 precision you use float but it provide a wrong value so in that situation you only use double.

if you want 0015 for inpt value 15 printf("%04d",a);


it have long double 

if you wnat space between the given value 1 printf("%4d",a); it provide 4 space and display 1


representation:
123
0b1010-binary
0144-oct
0x64 -hexa

%b- binary,%o-octo ,%x-hexa,%i- unsigned integer format specifier.

example:printf("%o",0x64);
output:144

Operators:

in / operator numerator and denominator are like 3/17 is answer is 0. always it value is 0 when numerator less then denominator.


time casting:
int a=1,b=2;
printf("%f",(float)a/b);  // it convert the int into float for a like 1 to 1.0 during execution only.

output is:0.5 


example2:

char ch=65;
printf("%c",ch);
output:A

in this program in the scanf("%d",&ch) if you type like this you see error so you use scanf("%hhd",&ch); %hhd (numeric input into char )

float cam change into char but char not change into float
higher data type can change.


increment/decrement:

pre- 1)increment/drec 2)final initialized 
post-1)initialized 2)increment/drec

order of precedence :have set of rules to execute like situation printf("%d %d",a,a++);  i think 10,10 but its 11,10 because a++ have a high priority so its execute first then it print.

example:
#include <stdio.h>

int main()
{
    int a=10;
    printf("%d %d %d %d %d ",a++,a--,a++,a--,a++);
}

output:10 11 10 11 10


example2:
#include <stdio.h>

int main()
{
    int a=10;
    printf("%d %d %d",a++,a,--a);
}

output:9 10 10

#include <stdio.h>

int main()
{
    int a=10;
    printf("%d %d %d %d %d",a++,--a,++a,a,++a);
}

ouptu:11 12 12 12 12

example:
#include <stdio.h>

int main()
{
    int a=10;
    printf("%d %d %d %d %d",--a,--a,++a,--a,--a);
}
output:7 7 7 7 7


bitwise operator:

left shift << move left side based on the given shift. we move the binary 


space key terminates string input on scanf so 
scanf("%[^\n]s") []---condition



condition:

in the if condition if(10>20);  if you ; put this if the condition false also it perform true only. without error
example:
#include <stdio.h>

int main()
{
    if(10>2);
     printf("hi");
    

    return 0;
}
in the if(10>2); is consider as the terminate so if consider the printf as the main function its not come under the if. (empty statement)



in the time based input if you input is 20/2/2003  if provide only 20 -32452 2345235 like this so you need to include the printf("%d:%d:%d",d,m,y); like this so this consider the value correctly.


int main() { 
    printf("\\n");
    return 0;
}

\ is to print the \n 

Accept a float value as input and print the same in Exponential Form
int main() {
    float a;
    scanf("%f",&a);
    printf("%e",a);
    return 0;
}

input:1234.567
out:1.234567e+03

Given 2 nos, Print the first number as a 5-digit Number and Print the Second number in the Next Line with 5 width space
int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int a,b;
    scanf("%d %d",&a,&b);
    printf("%05d\n",a);
    printf("%5d\n",b);
    return 0;
}
input:25 98
out:00025
       98

Use %zu — the correct format specifier for size_t
Use %lu — if you know your platform uses unsigned long for size_t
%ld is a format specifier used with printf() to print a value of type:
long int (a longer version of int)


Scan a string that accepts all characters and stops scanning when lower case characters are encountered
int main() {
    char ch[1000];
    scanf("%[^a-z]s",ch);
    printf("%s",ch);
    return 0;
}

input:HELLO WORLD How are you
out:HELLO WORLD H


Scan a string that accepts letters only. (Both uppercase and lowercase letters):
int main() {

    char str[1000];
    scanf("%[A-Za-z]",str);
    printf("%s",str);
    return 0;
}
input:Hello123
out:Hello

scanf("%[A-Za-z]s", str);
The s at the end is not valid after %[A-Za-z].
%[A-Za-z] is already a complete format specifier.



switch case:

#include <stdio.h>

int main()
{
	int caseno;
	Start:
	printf("1.apple\n");
	printf("2.orange\n");
	scanf("%d",&caseno);

	switch(caseno)
	{
	case 1:
		printf("apple");
		break;
	case 2:
		printf("orange");
		break;
	default:
		printf("see you");
		goto Start;
	}

	return 0;
}

output:
1.apple
2.orange
4
see you


in increment:
 int a=10,b;
 b=a++;


Write a program to convert Decimal to Octal and Hexadecimal:

int main() {

    int a,b;
    scanf("%d %d",&a,&b);
    printf("%o %X",a,b);
    return 0;
}

input:100 1020
out:144 3FC

forloop:
for(initial;condition;incre/decre,statement){}


for loop used in scenarios like pattern.
while loop used in scenarios like numbers.


we also use for loop like this:
#include <stdio.h>

int main() {
    int a=3;
    int i;
    for(;i<=n;)
    {
        i++;
    }
    return 0;
}


#include <stdio.h>

int main() {
    int a=3;
    for(int i=1;i<=n;i++,printf("hello"))
    {
      
    }
    return 0;
}
ouptu:hellohellohello

#include <stdio.h>

int main() {
    int a=3;
    for(int i=1;i<=a;i++,printf("hello %d",i))
    {
      
    }
    return 0;
}
output:hello 2hello 3hello 4



pattern:

examples:
#include <stdio.h>

int main()
{
    for( int row=1;row<=3;row++,printf("\n")){
        for(int col=1;col<=7;col++)
           printf("*");
    }
}

output:
*******
*******
*******


#include <stdio.h>

int main()
{
    for( int row=1;row<=5;row++,printf("\n")){
        for(int col=1;col<=row;col++)
           printf("*");
    }
}
ouput:
*
**
***
****
*****

#include <stdio.h>

int main()
{
    for( int row=5;row>=1;row--,printf("\n")){
        for(int col=1;col<=row;col++)
           printf("*");
    }
}

ouput:
*****
****
***
**
*


#include <stdio.h>

int main()
{
    int n=5;
    for(int row=1;row<=n;row++,printf("\n")){
        for(int col=1;col<=row;col++)
           printf("%d",col);
    }
}
output:
1
12
123
1234
12345


#include <stdio.h>

int main()
{
    int n=5;
    for(int row=1;row<=n;row++,printf("\n")){
        for(int col=row;col>=1;col--)
           printf("%d",col);
    }
}
output:
1
21
321
4321
54321


#include <stdio.h>

int main()
{
    int n=5;
    for(int row=n;row>=1;row--,printf("\n")){
        for(int col=row;col<=n;col++)
           printf("%d",col);
    }
}
output:
5
45
345
2345
12345


#include <stdio.h>

int main()
{
    int n=5;
    for(int row=n;row>=1;row--,printf("\n")){
        for(int col=n;col>=row;col--)
           printf("%d",col);
    }
}
output:
5
54
543
5432
54321


#include <stdio.h>

int main()
{
    int n=5;
    for(int row=1;row<=n;row++,printf("\n")){
        for(int col=row;col<=n;col++)
           printf("%d",col);
    }
}
putput:
12345
2345
345
45
5


#include <stdio.h>
int main()
{	int n=5,odd=1,even=2;                                                                               
	for(int row=1; row<=n ; row++,	printf("\n"))
	{
	    odd=1,even=2;
	    if(row%2==1)
	    {
	        for(int col=1;col<=row;col++)
	        {
	            printf("%d",odd);
	            odd=odd+2;
	        }
	    }
	    else
	    {
	        for(int col=1;col<=row;col++)
	        {
	            printf("%d",even);
	            even=even+2;
	        }
	    }
	}
}


another method:
#include <stdio.h>

int main() {
    int i, j,c;

    for (i = 1; i <= 6; i++) { 
        c = (i%2==0)?2:1;
        for (j = 1; j <= i; j++) { 
            printf("%d",c); 
            c=c+2;
        }
        printf("\n");
    }

    return 0;
}

output:
1
24
135
2468
13579



#include <stdio.h>
int main()
{	int n=5,a=1;                                                                              
	for(int row=1;row<=n ;row++,printf("\n"))
	{
	   for(int space=row;space<n;space++){
	       printf(" ");
	   }
	    for(int col=1;col<=row;col++){
	       printf("*");
	    }
	}
}

output:
    *
   **
  ***
 ****
*****


#include <stdio.h>
int main()
{	int n=5,a=1;                                                                              
	for(int row=n;row>=1;row--,printf("\n"))
	{
	   for(int space=row;space<n;space++){
	       printf(" ");
	   }
	    for(int col=1;col<=row;col++){
	       printf("*");
	    }
	}
}
ouput:

*****
 ****
  ***
   **
    *


#include <stdio.h>
int main()
{	int n=5,a=1;                                                                              
	for(int row=1;row<=n ;row++,printf("\n"))
	{
	   for(int space=row;space<n;space++){
	       printf(" ");
	   }
	    for(int col=1;col<=2*row-1;col++){
	       printf("*");
	    }
	}
}

output:

    *
   ***
  *****
 *******
*********


#include <stdio.h>
int main()
{	int n=5,a=1;                                                                              
	for(int row=n;row>=1;row--,printf("\n"))
	{
	   for(int space=row;space<n;space++){
	       printf(" ");
	   }
	    for(int col=1;col<=2*row-1;col++){
	       printf("*");
	    }
	}
}

output:

*********
 *******
  *****
   ***
    *

initaial space for the right triangle:

#include <stdio.h>
int main()
{	int n=5,a=1;                                                                              
	for(int row=1;row<=n ;row++,printf("\n"))
	{
	   for(int space=row;space<=n;space++){
	       printf(" ");
	   }
	    for(int col=1;col<=row;col++){
	       printf("*");
	    }
	}
}
output:

     *
    **
   ***
  ****
 *****


#include <stdio.h>
int main()
{	int n=5,a=1;                                                                              
	for(int row=1;row<=n ;row++,printf("\n"))
	{
	   for(int space=row;space<=n;space++){
	       printf(" ");
	   }
	    for(int col=1;col<=n;col++){
	       printf("*");
	    }
	}
}
output:

     *****
    *****
   *****
  *****
 *****


#include <stdio.h>
int main()
{	int n=5,a=1;                                                                              
	for(int row=1;row<=n ;row++,printf("\n"))
	{
	   for(int space=row;space<=n+10;space++){
	       printf(" ");
	   }
	    for(int col=1;col<=n;col++){
	       printf("*");
	    }
	}
}
output:

               *****
              *****
             *****
            *****
           *****


#include <stdio.h>
int main()
{	int n=5,a=1;                                                                              
	for(int row=n;row>=1 ;row--,printf("\n"))
	{
	   for(int space=row;space<=n;space++){
	       printf(" ");
	   }
	    for(int col=1;col<=n;col++){
	       printf("*");
	    }
	}
}

output:

 *****
  *****
   *****
    *****
     *****

#include <stdio.h>
int main()
{	int n=5,a=1;                                                                              
	for(int row=n;row>=1 ;row--,printf("\n"))
	{
	   for(int space=row;space<=n;space++){
	       printf(" ");
	   }
	    for(int col=1;col<=n;col++){
	       printf("%d",col);
	    }
	}
}

output:

 12345
  12345
   12345
    12345
     12345


#include <stdio.h>
int main()
{	int n=5,a=1;                                                                              
	for(int row=n;row>=1 ;row--,printf("\n"))
	{
	   for(int space=row;space<=n;space++){
	       printf(" ");
	   }
	    for(int col=n;col>=1;col--){
	       printf("%d",col);
	    }
	}
}

output:

 54321
  54321
   54321
    54321
     54321


#include <stdio.h>
int main()
{	int n=5,a=1;                                                                              
	for(int row=1;row<=n ;row++,printf("\n"))
	{
	   for(int space=row;space<=n;space++){
	       printf(" ");
	   }
	    for(int col=row;col<=n;col++){
	       printf("%d",col);
	    }
	}
}
output:

     12345
    2345
   345
  45
 5



#include <stdio.h>

int main()
{
	int n=5;
	for(int row=n; row>=1; row--,printf("\n")) {
		for(int col1=1; col1<row; col1++) {
			printf("%d",col1);
		}
		 for(int col=n; col>=row; col--) {
			printf("%d",col);
		 }

	}
	return 0;
}
output:

12345
12354
12543
15432
54321





#include <stdio.h>

int main()
{
	int n=5;
	for(int row=1; row<=n; row++,printf("\n")) {
		 for(int col1=n;col1>row;col1--)
		     printf("%d",col1);
		      for(int col=1; col<=row; col++) {
			printf("%d",col);
		 }
		

	}
	return 0;
}

output:

54321
54312
54123
51234
12345




#include <stdio.h>

int main()
{
	int n=5;
	for(int row=1; row<=n; row++,printf("\n")) {
		for(int col=1; col<=n; col++) {
		    if(row>1&&col==(n/2)+1)
			  printf("%d",row-1);
			  else 
			   printf("%d",n);
		}
	}
	return 0;
}
output:

55555
55155
55255
55355
55455


halo square:


#include <stdio.h>

int main()
{
	int n=5;
	for(int row=1; row<=n; row++,printf("\n")) {
		for(int col=1; col<=n; col++) {
		    if(row==1||row==n||col==1||col==n)
		      printf("*");
		    else
		      printf(" ");
			 
		}
	}
	return 0;
}
output:

*****
*   *
*   *
*   *
*****




#include <stdio.h>

int main()
{
	int n=7;
	for(int row=1; row<=n; row++,printf("\n")) {
		for(int col=1; col<=n; col++) {
		    if(row==1||row==n/2+1||row==n||col==1||col==n/2+1||col==n)
		      printf("*");
		    else
		      printf(" ");
			 
		}
	}
	return 0;
}
output:

*******
*  *  *
*  *  *
*******
*  *  *
*  *  *
*******




#include <stdio.h>

int main()
{
	int n=5;
	for(int k=1;k<=3;k++){
	for(int row=1; row<=n; row++,printf("\n")) {
		for(int col=1; col<=n; col++) {
		    if(row==col||col==n-row+1)
		      printf("*");
		    else
		      printf(" ");
		}
	}
	}
	return 0;
}
output:

*   *
 * * 
  *  
 * * 
*   *
*   *
 * * 
  *  
 * * 
*   *
*   *
 * * 
  *  
 * * 
*   *


pointer:

int *pi;
int* pi;


we declare separate separate * pointer to the variables like int *a,*b;
or int* a,*b;

to access the value address printf("%d",&a);

integer pointetr only store address value 

we can use this pointer to hide the a value but it value display in b


#include <stdio.h>

int main()
{
	int a=10;
	int *p;
	p=&a;
	int *b;
	b=p;
	printf("%d",*b);
	
	return 0;
}
output:10


we can able to put pointer into pointer **b;

we also able to store triple pointer address int ***c=&p;

can able to 	int *p=NULL;
                void *p;


free(); change the value

pointer datatypes:

https://chatgpt.com/share/68528f0f-1f1c-8001-97db-4830b346704a


return function:

return_type func_name(){
body of the functions;
}

example:

#include <stdio.h>

void hey(){
    printf("hello");
}
int main()
{
	hey();
}

we can call the hey(); to call the dunction the i print.

if you want to pass the value:


#include <stdio.h>

void hey(int a){
    printf("hello %d",a);
}
int main()
{
	hey(12);
}

output:hello 12

another example:


#include <stdio.h>

void hey(int a,char b,float c){
    printf("hello %d %c %f",a,b,c);
}
int main()
{
	hey(12,'r',2.14);
}
output:
hello 12 r 2.140000


in c we do not declare the function below the main function if you wnat to declare below we need to define abpve the main function:
#include <stdio.h>

void hey(int a,char b,float c);

int main()
{
	hey(12,'r',2.14);
}

void hey(int a,char b,float c){
    printf("hello %d %c %f",a,b,c);
}


we need to define like this void hey(int a,char b,float c);



actural and formal parameter:



#include <stdio.h>

void add(int x,int y) //formal parameter
{ 
    printf("%d ",x+y);
}
int main()
{
    int a=10,6=20;
	add(a,b); //actual parameter
}

if i wnat to return the value to the main function:
 use int function and return the value to the main function

and if you wnat return to specific datatypes you use that datatypes infront of function



#include <stdio.h>

float add(int x,int y) //formal parameter
{ 
    return x+y;
}
int main()
{
    int a=10,b=20;

	printf("%f",add(a,b));
}


if you pass the addres of the value your function must have pointer variable that only access that:

example:
#include <stdio.h>

void add(int *x,int *y) //formal parameter
{ 
    printf("%d %d",*x,*y);
}
int main()
{
    int a=10,b=20;
    add(&a,&b);
}


callbyvalue:


#include <stdio.h>

void add(int *x,int *y) //formal parameter
{ 
    printf("%d %d",*x,*y);
}
int main()
{
    int a=10,b=20;
    add(&a,&b);
    printf("%d %d",a,b);
}


callbyreference:


#include <stdio.h>

void add(int *x,int *y) //formal parameter
{ 
    printf("%d %d\n",*x,*y);
    *x=45,*y=56;
}
int main()
{
    int a=10,b=20;
    add(&a,&b);
    printf("%d %d",a,b);
}
output:

10 20
45 56

if you know range you use for loop doesn't know use while loop


while loop:

in while loop remove for using / and access for using % value like 1234 -->123-->12-->1-->0

example:
#include <stdio.h>

int main()
{
    int num=1234;
    while (num!=0){
        int rem=num%10;
        printf("%d\n",rem);
        num=num/10;
       
    }

    return 0;
}
output:
4
3
2
1

Adam number:
Square of the number: \(12^{2}=144\)  Reverse of the number: The reverse of 12 is 21.  Square of the reverse: \(21^{2}=441\)  


#include <stdio.h>
int main()
{
  int n=17;
  int sq=n*n;
  int rev_n=0;
  while(n!=0)
  {
      int rem=n%10;
      rev_n=rev_n*10+rem;//21
      n=n/10;
  }
  int sq_rev_n=rev_n*rev_n;//441

  int rev_sq_rev_n=0;
  while(sq_rev_n!=0)
  {
      int rem=sq_rev_n%10;
      rev_sq_rev_n=rev_sq_rev_n*10+rem;
      sq_rev_n=sq_rev_n/10;
  }
  sq==rev_sq_rev_n?printf("Adam"):printf("Not");
  
  
}


using function for adam number:

#include <stdio.h>
int reverse(int n){
    int rev_n=0;
    while(n!=0)
  {
      int rem=n%10;
      rev_n=rev_n*10+rem;//21
      n=n/10;
  }
  return rev_n;
}

int main()
{
  int n=12;
  int sq=n*n;
  int rev_n=reverse(n);
  int sq_rev_n=rev_n*rev_n;
  int rev_sq_rev_n=reverse(sq_rev_n);//441
  
  sq==rev_sq_rev_n?printf("Adam"):printf("Not");
}
output:adam 	


Armstrong number:

#include <stdio.h>
#include <math.h>
int main()
{
  int n=153;
  int temp=n;
  int count=0;
  
  while(n){
      n=n/10;
      count++;
  }
  
  n=temp;
  int sum=0;
  while(n)
  {
    int rem=n%10;
    sum=sum+pow(rem,count);
    n=n/10;
  }

  temp==sum?printf("Armstrong"):printf("Not");
}

output:Armstrong 


prime number:
#include <stdio.h>

int main(){
    int n=13,flag=0;
    for(int i=2;i>=n;i++){
        if(n%i==0){
            flag=1;
            break;
        }
    }
    flag==0?printf("prime"):printf("not");
    return 0;
}
out:prime

kaprekar number:

#include <stdio.h>
#include<math.h>
int main()
{
   int n=46;
   int sq=n*n;//2025
   int temp=sq;//2025
   int p=10;
   int flag=0;
   while(sq!=0)//2025
   {
       int quo=temp/p;//2025/10 =202 
       int rem=temp%p;//2025%10=5 
       
       if((quo+rem)==n)
       {
           flag=1;
           break;
       }
       
       p=p*10;//10->100
       sq=sq/10;
   }
  flag==1  ?printf("kaprekar"):printf("Not"); 
}

divide the digits in front:

#include <stdio.h>
#include <math.h>
int main()
{
    int n=12345;
    int temp=n;
    int count=0;
    while(n!=0){
        count++;
        n=n/10;
    }
    n=temp;
    int p=pow(10,count-1);
    while(n!=0){
        int quo=n/p;
        printf("%d ",quo);
        n=n%p;
        p=p/10;
    }

    return 0;
}
ouptu:
1 2 3 4 5



#include <stdio.h>
#include <math.h>
int main()
{
	int n=12345;
	int temp=n;
	int count=0;
	while(n!=0) {
		count++;
		n=n/10;
	}
	printf("odd:");
	n=temp;
	int p=pow(10,count-1);
	while(n!=0) {
		int quo=n/p;
		if(quo%2==1) {
			printf("%d ",quo);
		}
		n=n%p;
		p=p/10;
	}
	printf("even:");
	n=temp;
	p=pow(10,count-1);
	while(n!=0) {
		int quo=n/p;
		if(quo%2==0) {
			printf("%d ",quo);
		}
		n=n%p;
		p=p/10;
	}
	return 0;
}
output:
odd:1 3 5 even:2 4




#include <stdio.h>
#include <math.h>
int main()
{
	int n=12345;
	int temp=n;
	int count=0;
	while(n!=0) {
		count++;
		n=n/10;
	}
	printf("odd:");
	n=temp;
	int p=pow(10,count-1);
	int rev=0;
	while(n!=0) {
		int quo=n/p;
		if(quo%2==1) {
			printf("%d ",quo);
			rev=rev*10+quo;
		}
		n=n%p;
		p=p/10;
	}
    int oddrev=0;
    while(rev>0){
        int rem=rev%10;
        oddrev=oddrev*10+rem;
        rev=rev/10;
        
    }
    printf("Reverse odd:%d ",oddrev);


	return 0;
}

output:
odd:1 3 5 reverse:531


#include <stdio.h>
#include <math.h>
int main()
{
	int n=12345;
	int temp=n;
	int count=0;
	while(n!=0) {
		count++;
		n=n/10;
	}
	printf("even:");
	n=temp;
	int p=pow(10,count-1);
	int rev=0;
	while(n!=0) {
		int quo=n/p;
		if(quo%2==0) {
			printf("%d ",quo);
			rev=rev*10+quo;
		}
		n=n%p;
		p=p/10;
	}
    int evenrev=0;
    while(rev>0){
        int rem=rev%10;
        evenrev=evenrev*10+rem;
        rev=rev/10;
        
    }
    printf("Reverse even:%d ",evenrev);


	return 0;
}
output:
even:2 4 reverse:42

happy numbers
lukers numbers
disarium number
harshad
strong 



array:
int[]={};
a[0]=32;
static array

example:

#include <stdio.h>

int main()
{
    int a[10]={1,2,3,4,5};
    int n=5;
    for(int i=0;i<n;i++)
     printf("%d ",a[i]);

    return 0;
}
output:1 2 3 4 5


#include <stdio.h>

int main()
{
    int a[10]={1,2,3,4,5};
    int n=5;
 
     printf("%d ",*a);

    return 0;
}
output:1

if you need print all the array value you need to use "for loop"
a[i]


#include <stdio.h>

int main()
{
    
    int n;
    scanf("%d",&n);                 
    int a[n];
    for(int i=0;i<n;i++)
      scanf("%d",&a[i]);
   
    for(int i=0;i<n;i++)
      printf("%d ",a[i]);
     

    return 0;
}

[?2004l
5
1 2 3 4 5
1 2 3 4 5 [?2004h


using arry and sum of n values:

#include <stdio.h>

int main()
{
    
    int n,sum=0;int i;
    scanf("%d",&n);
    int a[n];
    for(int i=0;i<n;i++)
      scanf("%d",&a[i]);
   
    for(int i=0;i<n;i++)
      
      sum=sum+a[i];
      printf("\n");printf("%d",sum);

    return 0;
}
output:


5
1 2 3 4 5

15


linear search using array:


#include <stdio.h>

int main()
{
    
    int n,flag=0;int i;
    scanf("%d",&n);
    int a[n];
    for(int i=0;i<n;i++)
      scanf("%d",&a[i]);
    int target;
    scanf("%d",&target);
    
    for(int i=0;i<n;i++){
        if(a[i]==target){
            flag=1;
            break;
        }
    }
    if(flag){
        printf("element found");
    }  
    else{
        printf("not");
    }
     

    return 0;
}

output:
[?2004l
5
1 2 3 4 5
2
element found[?2004h


print the odd elment in the array:

#include <stdio.h>

int main()
{
    
    int n,flag=0;int i;
    scanf("%d",&n);
    int a[n];
    for(int i=0;i<n;i++)
      scanf("%d",&a[i]);

    for(int i=0;i<n;i++){
        if(a[i]%2==1){
            printf("%d ",a[i]);
        }
    }
      
     

    return 0;
}

linear sort:



#include <stdio.h>

int main()
{
 int n=5;
 int a[5]={5,2,3,4,1};
 for(int i=0;i<n;i++){
     for(int j=i+1;j<n;j++){
         if(a[i]>a[j]){
             int temp=a[i];
             a[i]=a[j];
             a[j]=temp;
                
         }
     }
    
 }
 for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }



    return 0;
}


USING FUNCTION LINEAR SORT"

#include <stdio.h>
void printArray(int *a,int n)//int a[]
{
	for(int i=0; i<n; i++)
		printf("%d ",a[i]);

}
void sort(int a[],int n)
{
	for(int i=0; i<n; i++) //0
	{
		for(int j=i+1; j<n; j++) //
		{
			if(a[i]>a[j])
			{
				int temp=a[i];
				a[i]=a[j];
				a[j]=temp;
			}
		}
	}
}
int main()
{
	int n=5;
	int arr[5]= {4,2,3,1,0};
	sort(arr,n);
	printArray(arr,n);

}


array function:

#include <stdio.h>
void printArray(int *a,int n){
    for(int i=0;i<n;i++)
      printf("%d ",a[i]);
}
int main()
{
 int n=5;
 int arr[5]={1,2,3,4,5};
 printArray(arr,n);
    return 0;
}

print duplicate numbers:


#include <stdio.h>

int main()
{
	int n=6,count=1;
	int a[7]= {2,3,2,3,5,4};
	for(int i=0; i<n; i++) {
		if(a[i]==-1)
			continue;
		count=1;
		for(int j=i+1; j<n; j++) {
			if(a[i]==a[j]) {
				count++;
				a[j]=-1;
			}
		}
		printf("%d:%d\n",a[i],count);
		count=1;
	}

	return 0;
}
output:
[?2004l
2:2
3:2
5:1
4:1
[?2004h


print frequency of each distinct elements:


#include <stdio.h>

int main()
{
	int n=9,count=1; //WHY COUNT=1 MEANS IT START WITH ONE DIGIT
	int a[10]= {1,2,2,2,3,3,4,4,4};
	for(int i=0; i<n; i++) {

		if(a[i]==a[i+1]) {
			count++;
		}
		else {
			printf("%d:%d\n",a[i],count);
			count=1;
		}

	}
	return 0;
}
output:

1:1
2:3
3:2
4:3


print the unique values:
 

#include <stdio.h>

int main()
{
	int n=6;
	int a[7]= {2,3,2,3,5,4};
	for(int i=0; i<n; i++) {
		if(a[i]==-1)
			continue;

		for(int j=i+1; j<n; j++) {
		    if(a[i]==a[j])
			a[j]=-1;
		}
	}


	for(int i=0; i<n; i++) {

		if(a[i]!=-1)
			printf("%d ",a[i]);
	}
	return 0;
}
output:
[?2004l
2 3 5 4 [?2004h


copy array to another:

print array using sub-fucntion:

find largest element:

 

#include <stdio.h>

int main()
{
	int n=6;
	int a[7]= {2,3,2,3,5,4};
	int max=a[0];
	for(int i=0; i<n; i++) {
		if(a[i]>max)
			max=a[i];

	}
	printf("%d",max);
}
output:
5


find 2nd largest element:


find k largest elements:'sample input:3,8,6,5   k=2
  ouput:8 6


print distinct values:	

separate even and odd numbers:


one program have sort the odd and even like 12345  ; 13524:


#include <stdio.h>
void sort(int a[],int i,int n)
{
    for(; i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(a[i]>a[j])
            {
            int temp=a[i];
            a[i]=a[j];
            a[j]=temp;
            }
        }
    }
}

int main()
{
	int n=9;
	int a[]= {1,2,3,4,5,6,7,8,9};
    int i=0,j=n-1;
    while(i<j)
    {
        if(a[i]%2==0)
        {
            while(j>i)
            {
                if(a[j]%2==1)
                {
                    int temp=a[i];
                    a[i]=a[j];
                    a[j]=temp;
                    break;
                }
                j--;
            }
        }
        i++;
    }
    for(int i=0;i<n;i++)
    printf("%d ",a[i]);
    sort(a,0,i);
    sort(a,j,n);
    printf("\n");
    for(int i=0;i<n;i++)
    printf("%d ",a[i]);




}

array rotation:






int cse[10][60]
     cse[row][col]

int college[5][4][5][3][10];

 int a[10][60];
printf(arr,n);



#include <stdio.h>

int main()
{
    int r=2,c=2;
    int a[2][3]={1,2,3,4,5,6};
    for(int i=0;i<2;i++,printf("\n")){
        for(int j=0;j<3;j++){
            printf("%d ",a[i][j]);
        }
    }

    return 0;
}
output:
[?2004l
1 2 3 
4 5 6 
[?2004h



matrix problem:


addition of two matrixs


matrix multiplication:( formula:c[i][j]=c[i][j]+a[i][k]*a[k][j]; )

transpose of matrix

check if two matrics are equal

inverse of a matrix

check sparse matrix'

adjacency matrix for graph

sum of diagonal elements



string:

cha str[100];


\0 -null character is used to stop the process in string.


find lenghth:



#include <stdio.h>

int main()
{
    char str[100]="hello world";
    int i;
    for(i=0;str[i];i++);
    printf("%d",i);

    return 0;
}
output:11


print string into char one by one:


#include <stdio.h>

int main()
{
    char str[100]="hello world";
    int i;
    for(i=0;str[i]!='\0';i++)
    printf("%c ",str[i]);

    return 0;
}
output:

h e l l o   w o r l d 


check whether the char is in the  string or not:



#include <stdio.h>

int main()
{
    char str[100];
    scanf("%s",str);
    char ch;
    scanf(" %c",&ch);
    int flag=0;
    for(int i=0;str[i]!='\0';i++){
        if(str[i]==ch){
            flag=1;
            break;
        }
    }
    flag==1?printf("present"):printf("not");
    
}
output:

hello 
l
present


copy the stirng value into another:

(first method but if you use this it provide garbage value after the string value)



#include <stdio.h>

int main()
{
    char str1[100]="hello world";
    char str2[100];
    int i;
     for(int i=0;str1[i]!='\0';i++){
        str2[i]=str1[i];
    }
    
    
    printf("%s %s",str1,str2);

    
}

output:
hello world hello world  



if your are using the str2[100]="";

#include <stdio.h>

int main()
{
    char str1[100] = "hello world";
    char str2[100] = "";
    int i;

    // Copying characters
    for(i = 0; str1[i] != '\0'; i++) {
        str2[i] = str1[i];
    }

    // Add null terminator
    str2[i] = '\0';

    printf("%s %s", str1, str2);

    return 0;
}
output:hello world hello world




reverse the string:



#include <stdio.h>

int main()
{
    char str1[100]="hello world";
    char str2[100]="";
    int i=0,j;
    
    while(str1[i]!='\0'){
        i++;
    }
    
    for(j=0;i>0;i--,j++){
        str2[j]=str1[i-1];
    }
    
    printf("%s",str2);    
}
output:

dlrow olleh


palindrome:



#include <stdio.h>

int main()
{
    char str1[100]="hello world";
    char str2[100]="";
    int i=0,j,flag=1;
    
    while(str1[i]!='\0'){
        i++;
    }
    
    for(j=0;i>0;i--,j++){
        str2[j]=str1[i-1];
    }
    
    
    for(int i=0;str1[i]!='\0';i++){
        if(str1[i]==str2[i]){
            flag=0;
            break;
        }
    }
    
    flag==1?printf("palindrome"):printf("not");
    
}
output:
not


compare the two string:



#include <stdio.h>

int main()
{
    char str1[100]="hello world";
    char str2[100]="hello";
    int length=0;
    int flag=1;int i=0;
    
    
    while(str1[i]!='\0'){
        length++;
        i++;
    }
    for(int i=0;i<length;i++){
     
        if(str1[i]!=str2[i]){
            flag=0;
            break;
        }
    }
    flag==1?printf("equal"):printf("not");
}
output: not 


concatenation:


#include <stdio.h>

int main()
{
    char str1[100]="hello world";
    char str2[100]="hello";
    int len1=0;
    int i;
    for(len1=0;str1[len1]!='\0';len1++);
    
    str1[len1++] = ' ';
    
    for(i=0;str2[i]!='\0';i++){
        str1[len1++]=str2[i];
    }
    
    printf("%s",str1);

    return 0;
}
output:
hello world hello






strlen,strcmp,strcat,strcpy,strrev(it remove from this language),strsep,str



count freqyency of each character: (ex:aaabbbcc) a:3 b:3 c:2


convert vowels to $:


#include <stdio.h>

int main()
{
    char str1[100]="hello world";int i;
    for(int i=0;str1[i]!='\0';i++){
        if(str1[i]=='a'||str1[i]=='e'||str1[i]=='i'||str1[i]=='o'||str1[i]=='u'){
            str1[i]='$';
        }
    }
    printf("%s",str1);
}
output:


h$ll$ w$rld

convert consonants to #;


#include <stdio.h>

int main()
{
    char str1[100]="hello world";int i;
    for(int i=0;str1[i]!='\0';i++){
        if(str1[i]!='a'&&str1[i]!='e'&&str1[i]!='i'&&str1[i]!='o'&&str1[i]!='u'){
            str1[i]='#';
        }
    }
    printf("%s",str1);
}
output:

#e##o##o###

count alphabet,number and special characters:


#include <stdio.h>

int main()
{
	char str1[100]="hello world";

	int alpha=0,num=0,special=0;
	for(int i=0; str1[i]!='\0'; i++) {
		if((str1[i]>=65&&str1[i]<=90)||(str1[i]>=97&&str1[i]<=122)) {
			alpha++;
		}
		else if(str1[i]>=48&&str1[i]<=57) {
			num++;
		}
		else {
			special++;
		}
	}
	printf("%d %d %d",alpha,num,special);
}
output:

10 0 1



identity substring:

method-1:

#include <stdio.h>
#include<string.h>
int main()
{
    char str[200]="i like to be a prograprogram.";
    char substr[100]="program";
    int flag=0;
    for(int i=0;str[i]!='\0';i++)
    {
        if(str[i]==substr[0])
        {
            flag=0;
            for(int j=0;substr[j];j++)
            {
                if(str[i]!=substr[j])
                {
                    flag=1;break;
                }
                i++;
            }
            i=i-1;
            
            if(flag==0)
            break;
        }
    }
    flag==0?printf("Found"):printf("Not found");
    
}
output:
Found


method-2:

#include <stdio.h>
#include<string.h>
int main()
{
    char str[200]="i like to be a prograprogram.";
    char substr[100]="program";
    int flag=0;
    for(int i=0;str[i]!='\0';i++)
    {
        if(str[i]==substr[0])
        {
            flag=0;
            for(int j=0;substr[j];j++)
            {
                if(str[i+j]!=substr[j])
                {
                    flag=1;break;
                }
                
            }
        
            
            if(flag==0)
            break;
        }
    }
    flag==0?printf("Found"):printf("Not found");
    
}
output:
Found





count the substring:





reverse each word in the string:





rearrange the words:




remove duplicate:







count and print the frequency of each character in a string:

#include <stdio.h>
#include<string.h>
void sort(char *str,int len)
{
	for(int i=0; i<len; i++)
	{
		for(int j=i+1; j<len; j++)
			if(str[i]>str[j])
			{
				char temp=str[i];
				str[i]=str[j];
				str[j]=temp;
			}
	}
}


int main()
{
	char str[100]="babacabacdcecba";
	int len=strlen(str);
	sort(str,len);
	printf("%s\n",str);

	int count=1;
	for(int i=0; i<len; i++) {
		if(str[i]==str[i+1]) {
			count++;
		}
		else {
			printf("%c:%d ",str[i],count);
			count=1;
		}
	}

}

ouptu:

aaaaabbbbccccde
a:5 b:4 c:4 d:1 e:1







count duplicate and remove duplicate in one program: (in this program the duplicated values are transformed into to $ then remove that)

#include <stdio.h>
#include<string.h>
int main()
{
    char str[100]="abbaaaccbba";
    int count=1;
    for(int i=0;str[i]!='\0';i++)
    {
        if(str[i]=='$')
        continue;
        for(int j=i+1;str[j]!='\0';j++)
        {
            if(str[i]==str[j])
            {
                count++;
                str[j]='$';
            }
        }
        printf("%c:%d\n",str[i],count);
        count=1;
    }
   for(int i=0;str[i]!='\0';i++)
   if(str[i]!='$')
   printf("%c",str[i]);
    
    
}

output:

a:5
b:4
c:2
abc



Anagram:
method 1:

#include <stdio.h>
#include<string.h>
int main()
{
    char str1[100]="silent";
    char str2[100]="listen";
    int flag=0;
    int len1=strlen(str1),len2=strlen(str2);
    if(len1!=len2)
       flag=1;
    else
    {
        int c1=1,c2=0;
        for(int i=0;str1[i];i++)//0
        {
            c1=1,c2=0;
            if(str1[i]=='$') continue;
            for(int j=i+1;str1[j]!='\0';j++)
            {
                if(str1[i]==str1[j])
                {
                    c1++;
                    str1[j]='$';
                }
            }
            // printf("%s:%d\n",str1,c1);
            for(int j=0;str2[j];j++)
            {
                if(str1[i]==str2[j])
                c2++;
            }
            // printf("%c:%d\n",str1[i],c1);
            if(c1!=c2)
            {
                flag=1;break;
            }
        }
    }
    flag==0?printf("Anagram"):printf("Not");
}

output:
anagram





chatgpt method:

#include <stdio.h>

void sort(char str[], int len) {
	for (int i = 0; i < len - 1; i++) {
		for (int j = i + 1; j < len; j++) {
			if (str[i] > str[j]) {
				char temp = str[i];
				str[i] = str[j];
				str[j] = temp;
			}
		}
	}
}

int getLength(char str[]) {
	int i = 0;
	while (str[i] != '\0') {
		i++;
	}
	return i;
}

int isSame(char a[], char b[], int len) {
	for (int i = 0; i < len; i++) {
		if (a[i] != b[i]) {
			return 0;
		}
	}
	return 1;
}

int main() {
	char str1[100], str2[100];
	int len1, len2;

	printf("Enter first string (lowercase, no space): ");
	scanf("%s", str1);

	printf("Enter second string (lowercase, no space): ");
	scanf("%s", str2);

	len1 = getLength(str1);
	len2 = getLength(str2);

	if (len1 != len2) {
		printf("Not an anagram\n");
		return 0;
	}

	sort(str1, len1);
	sort(str2, len2);

	if (isSame(str1, str2, len1)) {
		printf("It is an anagram\n");
	} else {
		printf("Not an anagram\n");
	}

	return 0;
}

output:


Enter first string (lowercase, no space): wow
Enter second string (lowercase, no space): wow
It is an anagram


pangram:




#include <stdio.h>

int main() {
    char str[1000];
    int mark[26] = {0}; // to mark each letter a-z
    int i = 0;

    printf("Enter a sentence: ");
    scanf(" %[^\n]", str);  // reads sentence with spaces

    // Traverse the string and mark characters
    while (str[i] != '\0') {
        char ch = str[i];

        // Convert uppercase to lowercase manually
        if (ch >= 'A' && ch <= 'Z') {
            ch = ch + 32;
        }

        // If it's a letter between 'a' to 'z'
        if (ch >= 'a' && ch <= 'z') {
            mark[ch - 'a'] = 1;
        }

        i++;
    }

    // Check if all 26 letters are present
    int isPangram = 1;
    for (int j = 0; j < 26; j++) {
        if (mark[j] == 0) {
            isPangram = 0;
            break;
        }
    }

    if (isPangram)
        printf("It is a pangram\n");
    else
        printf("It is not a pangram\n");

    return 0;
}




method using array:(only applicable for  lowercase)


#include <stdio.h>

int main()
{
    char str[100]="abcdefghijklmnopqrstuvwxyz";
    int arr[26]={0};
    int flag=0;
    
    for(int i=0;str[i]!='\0';i++){
        arr[str[i]-'a']++;
    }
    
    for(int i=0;i<26;i++){
        if(arr[i]==0){
            flag=1;
            break;
        }
    }
    
    flag==0?printf("pangram"):printf("not");
}
output:
pangram


method using count:(only applicable for  lowercase)


#include <stdio.h>

int main()
{
    char str[100]="abdefghijklmnopqrstuvwxyz";
    int arr[26]={0};
    int flag=0;
    
    for(int i=0;str[i]!='\0';i++){
        arr[str[i]-'a']++;
    }
    
    for(int i=0;i<26;i++){
       printf("%c:%d ",i+97,arr[i]); //count the alphabets
       if (arr[i] == 0) {
            flag = 1;  
        }
    }
    
    flag==0?printf("pangram"):printf("not");
}
ouput:

a:1 b:1 c:0 d:1 e:1 f:1 g:1 h:1 i:1 j:1 k:1 l:1 m:1 n:1 o:1 p:1 q:1 r:1 s:1 t:1 u:1 v:1 w:1 x:1 y:1 z:1 
not



today workout program:


1. program input:This is India
        output:India is This 

     input:This is India
     output:sihT si aidnI


2.aaaabbccccd 
  output:a3b2c4d1

3.ababcabcabcaa
 ouptu:a6b4c3

4.i/p:a3b2c4d1
  o/p:aaabbccccd

5.i/p:a12b134c2d10

method-1:

#include <stdio.h>

int main()
{
	char n[100]="a2b5c12d4";

	int i=0;
	while(n[i]!='\0') {
		char c=n[i];
		i++;
		int num=0;
		while(n[i]>='0'&&n[i]<='9') {
			num=num*10+(n[i]-'0');
			i++;
		}
		
		for(int i=0; i<num; i++) {
		 printf("%c",c);
		}
	}
	
}
output:

aabbbbbccccccccccccdddd


method-2:

#include <stdio.h>

int main()
{
	char n[100]="a2b5c12d4";
	char newstr[100]="";
	int len1=0;
	int i=0;
	while(n[i]!='\0') {
		char c=n[i];
		i++;
		int num=0;
		while(n[i]>='0'&&n[i]<='9') {
			num=num*10+(n[i]-'0');
			i++;
		}
		
		for(int i=0; i<num; i++) {
		newstr[len1++]=c;
		}
	}
	printf("%s",newstr);
}
output:

aabbbbbccccccccccccdddd





6.i/p:ab3cde4d5
 o/p:abababcdecdecdecdeddddd

method-1:

#include <stdio.h>
#include <string.h>

int main()
{
	char n[100]="abc2de3";
	char newstr[100]="";
	int len1=0;
	int i=0;
	while(n[i]!='\0') //i=0
	{
		
		char substr[100]="";
		int k=0;
		while(n[i]>='a'&& n[i]<='z')//0
		{
		    substr[k++]=n[i];
		    i++;
		}
		int num=0;
		while(n[i]>='0'&&n[i]<='9') {
			num=num*10+(n[i]-'0');
			i++;
		}

		for(int i=0; i<num; i++) {
		    
			strcat(newstr,substr);
			
		}
	}
	printf("%s",newstr);
}
output:

abcabcdedede


method-2:

#include <stdio.h>

int main()
{
	char n[100]="abc2de3";
	char newstr[100]="";
	int len1=0;
	int i=0;
	while(n[i]!='\0') //i=0
	{
		
		char substr[100]="";
		int k=0;
		while(n[i]>='a'&& n[i]<='z')//0
		{
		    substr[k++]=n[i];
		    i++;
		}
		int num=0;
		while(n[i]>='0'&&n[i]<='9') {
			num=num*10+(n[i]-'0');
			i++;
		}

		for(int i=0; i<num; i++) {

			printf("%s",substr);
		}
	}
	printf("%s",newstr);
}

output:

abcabcdedede




7.i/p:ab12cde2fg123



string input:

#include <stdio.h>

int main()
{
	char name[3][15];
	for(int i=0; i<3; i++)
		scanf("%s",name[i]);

	for(int i=0; i<3; i++)
		printf("%s ",name[i]);
}

output:

[?2004l
hi
hello
1245
hi hello 1245 [?2004h


#include <stdio.h>

int main()
{
 int rollno[60];
 char name[3][15];
 float cgpa[60];
}


structure:

syntax: 

struct struct_name
{
    data types;
};

struct student is the data type , struct is the keyword.	

example:
#include <stdio.h>
#include <string.h>

struct student {
    int rollno;
    char name[15];
    float cgpa;
};

int main() {
    struct student s1, s2;

    // Assign values to s1
    s1.rollno = 101;
    strcpy(s1.name, "hello");  // Correct way to copy string into char array
    s1.cgpa = 3.14;

    // Input for s2
    printf("Enter rollno, name and cgpa for student 2:\n");
    scanf("%d %s %f", &s2.rollno, s2.name, &s2.cgpa);

    // Output for s1 and s2
    printf("Student 1: %d %s %.2f\n", s1.rollno, s1.name, s1.cgpa);
    printf("Student 2: %d %s %.2f\n", s2.rollno, s2.name, s2.cgpa);

    return 0;
}
output:

Enter rollno, name and cgpa for student 2:
102 John 9.2
Student 1: 101 hello 3.14
Student 2: 102 John 9.20



example 2:



#include <stdio.h>
#include <string.h>
struct student
{
     int rollno;
     char name[15];
     float cgpa;
};

void print(struct student *s){
    printf("%d\n",s->rollno);
    s->rollno=321;
}

int main()
{

 struct student s;
 s.rollno=101;
 strcpy(s.name,"ask");
 print(&s);
 printf("%d %s %f\n",s.rollno,s.name,s.cgpa);
    
}
output:

101
321 ask 0.000000



memory allocation:

structure padding:(it occupy based on their bytes)

structure packaging:(it occupy only require memory)
#pagma pack(1)   -> packange declare before coding.


union:

union student{

};



recursion:
the function call itself


file:

rewind();


example:

#include <stdio.h>
int main()
{
	FILE *fptr=fopen("ASK.txt","w+");
	if(fptr==NULL)
		printf("File not found");
	else
		printf("file found");
	fprintf(fptr,"QWERTY WOrld %d",456);
	rewind(fptr);
	char c,str[100];
	while(fgets(str,sizeof(str),fptr))
		printf("%s ",str);
	rewind(fptr);
	while((c=fgetc(fptr))!=EOF)
		printf("%c ",c);
	fclose(fptr);
}

output:

ASK.txt

QWERTY WOrld 456



file foundQWERTY WOrld 456 Q W E R T Y   W O r l d   4 5 6



recursion:

static int a=0; // this only work in the initial stage 


using the  static variable to count the number like some scenarios.

example:(fibanocci)

int fid(int n){
    if(n==0)
       return;
    else if(n==1)
    return 1;
    else
      return fib(n-1)+fib(n-2);
}


#include <stdio.h>
#include<stdlib.h>
static int a=0;
int fib(int n)
{
    if(n==0)
    return 0;
    else if(n==1)
    return 1;
    else
       return fib(n-1)+fib(n-2);
}
int main()
{
    int n=4;
    printf("%d ",fib(n));

}
//   0 1 1 2 3 5 8
//   0 1 2 3 4 5 6 

https://excalidraw.com/#json=pWw2EtPkxv4xAzeCmDpiZ,3nhGm6eBPXXQ2DnaqC13gA




find the nth fibanaooci serios find it nth postion value. 



main function -->subfunction 1-->subfunction 2 (it call function 1)   //it repeat



data structure:

linear, non linear

abstract data structure:

An Abstract Data Type is a logical description of how data is organized and what operations can be performed on it, without specifying how it is implemented.



time complexicity
how to find the tc 


big o --n/2
omega --1
theta-- o(logn)



#include <stdio.h>

int main()
{
    int a[100]={1,3,4,5};
    int n=4;
    int pos=5;
    int ele=2;
    
    for(int i=n;i>=pos;i--){
        a[i]=a[i-1];
    }
    
    a[pos-1]=ele;
    for(int i=0;i<n;i++){
        printf("%d ",a[i]);
    }
    return 0;
}


#include <stdio.h>

int main()
{
    int a[100]={1,3,4,5};
    int n=4;
    int pos=5;
    int ele=2;
    
    for(int i=n;i>=pos;i--){
        a[i]=a[i-1];
    }
    
    a[pos-1]=ele;
    for(int i=0;i<n;i++){
        printf("%d ",a[i]);
    }
    return 0;
}




n=5,pos=2,array=1,2,3,4,5  

a[1]=a[2]
a[2]=a[3]
a[3]=a[4]

insertion , deletion 
binary search
array rotation:

  left rotation:
  
#include <stdio.h>

int main()
{
    int a[100] = {1, 2, 3, 4, 5};
    int n = 5;

    // Step 1: Store the first element (to be moved to end)
    int temp = a[0];

    // Step 2: Shift all elements one position to the left
    for(int i = 0; i < n - 1; i++) {
        a[i] = a[i + 1];
    }

    // Step 3: Place the deleted element at the end
    a[n - 1] = temp;

    // Display rotated array
    printf("Array after left rotation by 1:\n");
    for(int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }

    return 0;
}


ouput:
3 4 5 1 2

right rotation:
#include <stdio.h>

int main()
{
    int a[100] = {1, 2, 3, 4, 5};
    int n = 5;

    // Step 1: Store the last element
    int temp = a[n - 1];

    // Step 2: Shift all elements right by 1
    for(int i = n - 1; i > 0; i--) {
        a[i] = a[i - 1];
    }

    // Step 3: Insert the deleted element at the start
    a[0] = temp;

    // Display rotated array
    printf("Array after right rotation by 1:\n");
    for(int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }

    return 0;
}

output:
4 5 1 2 3



this is  the one time rotation if you wwant more rotation you add for loop. in that for loop use inside this code.

left rotation:
#include <stdio.h>

int main()
{
    int a[100] = {1, 2, 3, 4, 5};
    int n = 5;
    int k = 3; // Number of rotations

    for(int r = 0; r < k; r++) {
        int temp = a[0];
        for(int i = 0; i < n - 1; i++) {
            a[i] = a[i + 1];
        }
        a[n - 1] = temp;
    }

    printf("Array after %d left rotations:\n", k);
    for(int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }

    return 0;
}

outpiut:

Array after 3 left rotations:
4 5 1 2 3



right rotation:

#include <stdio.h>

int main()
{
    int a[100] = {1, 2, 3, 4, 5};
    int n = 5;
    int k = 2; // Number of rotations

    for(int r = 0; r < k; r++) {
        int temp = a[n - 1];
        for(int i = n - 1; i > 0; i--) {
            a[i] = a[i - 1];
        }
        a[0] = temp;
    }

    printf("Array after %d right rotations:\n", k);
    for(int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }

    return 0;
}

output:

Array after 2 right rotations:
4 5 1 2 3


binary search:

#include <stdio.h>

int main()
{
    int arr[100]= {11,12,13,14,15,16};
    int n=6;
    int target=12;
    int str=0;
    int end=n-1;
    int found=0;

    while(str<=end) {
        int mid=(str+end)/2;

        if(arr[mid]==target) {
            found=1;
            printf("Element found at position %d (index %d)\n", mid+1, mid);
            break; // Exit the loop
        }
        else if(target<arr[mid]) {
            end=mid-1;
        }
        else if(target>arr[mid]) {
            str=mid+1;
        }
    }

    if(found==0) {
        printf("Element not found.\n");
    }

    return 0;
}
ouput:

Element found at position 2 (index 1)



to find lcm using this formula:LCM(a, b) = (a * b) / GCD(a, b)

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {

      
    int num1,num2,gcd=1;
    scanf("%d %d",&num1,&num2);
    int min=(num1<num2)?num1:num2;
    
    for(int i=1;i<=min;i++){
        if(num1%i==0&&num2%i==0){
            gcd=i;
        }
    }
    
    int lcm=num1*num2/gcd;
    printf("%d",lcm);
    return 0;
}
output:
40	

bubble sort:

#include <stdio.h>

// Bubble Sort function (your version)
void bubbleSort(int *a, int n)
{
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n - 1; j++)
        {
            if (a[j] > a[j + 1])
            {
                int temp = a[j];
                a[j] = a[j + 1];
                a[j + 1] = temp;
            }
        }
    }
}

int main()
{
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int a[n];

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &a[i]);
    }

    // Call the bubble sort function 
    bubbleSort(a, n);

    printf("Sorted array:\n");
    for (int i = 0; i < n; i++)
    {
        printf("%d ", a[i]);
    }
    printf("\n");

    return 0;
}

ouput:
Enter the number of elements: 5
Enter 5 elements:
4 2 5 1 3
Sorted array:
1 2 3 4 5


selection sort:

#include <stdio.h>

void selectionsort(int *a,int n){
    for(int i=0;i<n;i++){           //0
        int min=i;                  //0
        for(int j=i+1;j<n;j++){     //1
            if(a[min]>a[j]){         //
                min=j;
            }
        }
        if(min!=i){
            int temp=a[i];
            a[i]=a[min];
            a[min]=temp;
        }
    }
}


int main(){
    int n=5;
    int a[5]={2,4,5,1,3};
    selectionsort(a,n);
    
    for(int i=0;i<n;i++){
        printf("%d ",a[i]);
    }
    return 0;
}



insertion sort:
#include <stdio.h>

void insertionsort(int *a,int n){
    for(int i=1;i<n;i++){
        int j=i-1;
        while(j>=0&&a[j]>a[j+1]){
            int temp=a[j];
            a[j]=a[j+1];
            a[j+1]=temp;
            
            
            j--;
        }
    }
}


int main(){
    int n=5;
    int a[5]={2,4,5,1,3};
    insertionsort(a,n);
    
    for(int i=0;i<n;i++){
        printf("%d ",a[i]);
    }
    return 0;
}



memory allocation:

malloc()
calloc()
realloc()
free()



if you change the datatypes into another is called typecast.


malloc:

malloc(sizeof(int))--> it return the void memory

1. int *a=(int *)malloc(sizeof(int));

2.int *p;
  p = (int *) malloc(5 * sizeof(int));



example take this scenario:

&p=4000;
p=1000;
*p=3.14;

example:(likewise all the datatype)

#include<stdio.h>
#include<stdlib.h>
int main(){

int *a=(int*)malloc(sizeof(int));
*a=12;
printf("%d",*a);
}

o/p:12


if you want 10 number in integer 10*2=40 so use like this 
int *a=(int*)malloc(10*sizeof(int));



using dynmic memory to declared runtime:

example:

#include<stdio.h>
#include<stdlib.h>
int main(){
int n=10;
int *a=(int*)malloc(n*sizeof(int));
for(int i=0;i<n;i++){
    scanf("%d",&a[i]);
}

for(int i=0;i<n;i++){
  printf("%d ",a[i]);  
    
}

}
output:


1 2 3 4 5 6 7 89 12 2 3
1 2 3 4 5 6 7 89 12 2 


example2:

#include<stdio.h>
#include<stdlib.h>
int main(){
int n=10;
char *a=(char*)malloc(n*sizeof(char));
for(int i=0;i<n;i++){
    scanf("%c",&a[i]);
}

for(int i=0;i<n;i++){
  printf("%c ",a[i]);  
    
}

}

o/p:

hellohihello
h e l l o h i h e l


calloc and realloc:
#include <stdio.h>
#include<stdlib.h>
int main()
{
    int n=4;
    int *a=(int*)calloc(n,sizeof(int));
    
    for(int i=0;i<n;i++)
    scanf("%d",&a[i]);
    
    for(int i=0;i<n;i++)
    printf("%d ",a[i]);
    printf("\n");
    int count=3;
    a=realloc(a,count*sizeof(int));
    for(int i=n;i<n+3;i++)
    scanf("%d",&a[i]);
    for(int i=0;i<n+3;i++)
    printf("%d ",a[i]);
    
    
}


free:

instead of free value it provide randam address for that


in arry input collect runtime without use of -1 when i enter -1 it stop collecting thee input and print the before values:(without using n number)


#include <stdio.h>

int main()
{
    int a[100];
    for(int i=0;i<100;i++){
         scanf("%d",&a[i]);
         if(a[i]==-1){
             break;
         }
    }
    
    for(int i=0;a[i]!=-1;i++)
      printf("%d ",a[i]);

    return 0;
}
ouput:


1 2 3 4 5 -1 3 2
1 2 3 4 5 


with using n numbers: 


#include <stdio.h>

int main()
{
    int a[100];
    int num,count=0;
    for(int i=0;i<100;i++){
         scanf("%d",&num);
         if(num!=-1){
             a[i]=num;
             count++;
         }
         else break;
    }
    
    for(int i=0;i<count;i++)
      printf("%d ",a[i]);

    return 0;
}

output:


1 2 3 4 5 -1
1 2 3 4 5 



we can use the pointer variable to access the data using ->  

example:(access the a and enter the new value to interger rollno)


#include <stdio.h>


struct student{
      int rollno;
      char name;
      float cgpa;
  };
int main()
{
  struct student s1,s2;
  struct student *a;
  a=&s1;
  a->rollno=123;
  printf("%d",a->rollno);
  
}

output:
123


example:(access the a and enter the new string name)


#include <stdio.h>
#include <string.h>

struct student{
      int rollno;
      char name[10];
      float cgpa;
  };
int main()
{
  struct student s1,s2;
  struct student *a;
  
  a=&s1;
  strcpy(a->name,"nithish");
  
  printf("%s",a->name);
  
}
output:
Nithish


linkedlist is the collection of node. where nodes are connected in such a way that current node address stored in the previous node.
 node is a memory with the different data.


node is have struct memory.


linkedlist are used runtime memory create , store data


the input are stop when the next is 'null'.